name: Micro-service deploy to Develop

on:
  workflow_call:
    secrets:
      ACTIONS_CI_CD_ACCESS_TOKEN:
        required: true
      NPM_CI_CD_ACCESS_TOKEN:
        required: true
      SHIELDS_GH_TOKEN:
        required: true
env:
  APP_ENV: dev
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  AWS_RESOURCE_GROUP_NAME: Microservices-Dev-ResourceGroup
  AWS_REGION: us-east-1
  AWS_SSM_ROLE_TO_ASSUME: arn:aws:iam::921614945575:role/github-actions-role

jobs:
  func-build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # REQUIRED for OIDC
      contents: read
    defaults:
      run:
        working-directory: caller_repository
    env:
      S3_BADGES_BUCKET_REGION: us-east-1
      SHIELDS_IMAGE_URL: ghcr.io/badges/shields:next
      SHIELDS_HOST_PORT: 15080
      SHIELDS_CONTAINER_PORT: 8080
      SHIELDS_SERVER_URL: http://localhost:15080
    steps:
      - name: Checkout Caller Repository
        uses: actions/checkout@v4
        with:
          path: caller_repository

      - name: Checkout Workflows Repository
        uses: actions/checkout@v4
        with:
          repository: Cell-Ed/workflows
          path: workflows_repository

      - name: Checkout Templates Repository
        uses: actions/checkout@v4
        with:
          repository: Cell-Ed/openfaas-templates
          path: repo-templates
          token: ${{ secrets.ACTIONS_CI_CD_ACCESS_TOKEN }}
          ref: main

      - run: |
          ls -a
          cp -r ../repo-templates/template ./template
          rm -rf ../repo-templates

      - name: Define ENV VARS
        id: define_env
        run: |
          GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)
          echo "GITHUB_SHA_SHORT=$GITHUB_SHA_SHORT" >> $GITHUB_ENV
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '.' '-')
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TAG=$SERVICE_NAME:latest-$GITHUB_SHA_SHORT" >> $GITHUB_ENV

      - name: Get faas-cli
        run: curl -sLSf https://cli.openfaas.com | sudo sh

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.6.0
        with:
          mongodb-version: 4.4
          mongodb-replica-set: rs0

      - name: Install mongoTools
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-database-tools

      - name: Setup npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_CI_CD_ACCESS_TOKEN}}" > .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test ./ -- --coverage

      - name: Start shields.io Server
        run: |
          docker run -d -p ${{ env.SHIELDS_HOST_PORT }}:${{ env.SHIELDS_CONTAINER_PORT }} --env PORT=${{ env.SHIELDS_CONTAINER_PORT }} --name shields ${{ env.SHIELDS_IMAGE_URL }}
          until curl -s ${{ env.SHIELDS_SERVER_URL }} > /dev/null; do
            echo "Waiting for Shields.io container to be ready..."
            sleep 1
          done
          echo "Shields.io container is ready!"

      - name: Create Coverage Badge
        uses: ./workflows_repository/.github/createCoverageBadge
        with:
          COVERAGE_REPORT_PATH: "caller_repository/coverage/coverage-summary.json"
          LABEL: "Develop:"
          BADGE_GENERATOR_SERVER_URL: ${{ env.SHIELDS_SERVER_URL }}

      - name: Deploy Coverage Badge
        uses: reggionick/s3-deploy@v4
        with:
          folder: workflows_repository/.github/createCoverageBadge/dist/badge
          bucket: micro-services-docs/github-badges/dev/${{ env.SERVICE_NAME }}
          bucket-region: ${{ env.S3_BADGES_BUCKET_REGION }}
          "no-cache": true

      - name: Clean Coverage Badge Cache
        uses: ./workflows_repository/.github/cleanGithubImagesCache
        with:
          GH_TOKEN: ${{ secrets.SHIELDS_GH_TOKEN }}
          REPO_NAME: ${{ github.repository }}

      - name: Create .env File if Exists
        run: |
          if [ -f ".env.$APP_ENV" ]; then
            mv -f ".env.$APP_ENV" .env
            rm -f .env.*
            cat .env
          fi  
      - name: Run shrinkwrap build
        run: |
          faas-cli build -f ./${{ env.SERVICE_NAME }}.yml \
          --build-arg NPM_AUTH_TOKEN=${{ secrets.NPM_CI_CD_ACCESS_TOKEN }} --shrinkwrap
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_SSM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push the OpenFaaS function
        uses: docker/build-push-action@v6
        with:
          context: caller_repository/build/${{ env.SERVICE_NAME }}/
          file: caller_repository/build/${{ env.SERVICE_NAME }}/Dockerfile
          push: true
          tags: ${{ env.ECR_REPOSITORY }}/celled/${{ env.SERVICE_TAG }}
          build-args: |
            NPM_AUTH_TOKEN=${{ secrets.NPM_CI_CD_ACCESS_TOKEN }}
          platforms: linux/amd64

      - name: AWS SSM Send-Command
        uses: forgedconcepts/aws-ssm-send-command-action@main
        id: ssm
        with:
          aws-region: us-east-1
          targets: |
            [{
              "Key": "resource-groups:Name",
              "Values": ["${{ env.AWS_RESOURCE_GROUP_NAME }}"]
            },
            {
              "Key": "resource-groups:ResourceTypeFilters",
              "Values": ["AWS::EC2::Instance"]
            }]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":["runuser -l ubuntu -c 'cd /home/ubuntu/microservices && /bin/bash /home/ubuntu/microservices/deploy-service.sh  ${{ env.SERVICE_TAG }} | tee /home/ubuntu/microservices/deploy-${{ github.run_id }}.log' "],"workingDirectory":["/home/ubuntu/microservices"],"executionTimeout":["3600"]}

      # Catch SSM outputs
      - name: Get the outputs
        run: echo "${{ steps.vars.outputs.branch }} The Command id is ${{ steps.ssm.outputs.command-id }}"

